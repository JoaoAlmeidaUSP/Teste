import streamlit as st
import tempfile
import os
import PyPDF2
import google.generativeai as genai
from google.generativeai.types import HarmCategory, HarmBlockThreshold
import time
from datetime import datetime
import json

# Configura√ß√£o da p√°gina - DEVE ser a primeira linha do Streamlit
st.set_page_config(
    page_title="LexF√°cil", 
    layout="wide", 
    initial_sidebar_state="collapsed",
    page_icon="‚öñÔ∏è"
)

# CSS personalizado para interface moderna
st.markdown("""
<style>
    /* Reset e vari√°veis */
    :root {
        --primary-color: #2E86AB;
        --secondary-color: #A23B72;
        --accent-color: #F18F01;
        --success-color: #06D6A0;
        --warning-color: #F18F01;
        --error-color: #F71735;
        --text-color: #2D3436;
        --bg-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        --card-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
        --glass-bg: rgba(255, 255, 255, 0.25);
        --border-radius: 16px;
    }
    
    /* Layout principal */
    .main-container {
        background: var(--bg-gradient);
        min-height: 100vh;
        padding: 0;
        margin: 0;
    }
    
    /* Header moderno */
    .modern-header {
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        padding: 1.5rem 2rem;
        border-radius: 0 0 24px 24px;
        margin-bottom: 2rem;
        box-shadow: var(--card-shadow);
    }
    
    .header-title {
        font-size: 2.5rem;
        font-weight: 700;
        background: linear-gradient(45deg, #667eea, #764ba2);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-align: center;
        margin: 0;
    }
    
    .header-subtitle {
        text-align: center;
        color: rgba(255, 255, 255, 0.8);
        font-size: 1.1rem;
        margin-top: 0.5rem;
    }
    
    /* Cards modernos */
    .glass-card {
        background: var(--glass-bg);
        backdrop-filter: blur(16px);
        border-radius: var(--border-radius);
        padding: 2rem;
        box-shadow: var(--card-shadow);
        border: 1px solid rgba(255, 255, 255, 0.18);
        margin-bottom: 1.5rem;
    }
    
    /* Chat interface */
    .chat-container {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: var(--border-radius);
        padding: 1.5rem;
        margin-bottom: 2rem;
        box-shadow: var(--card-shadow);
        max-height: 600px;
        overflow-y: auto;
    }
    
    /* Personas modernas */
    .persona-selector {
        display: flex;
        gap: 1rem;
        flex-wrap: wrap;
        margin-bottom: 1.5rem;
    }
    
    .persona-card {
        background: rgba(255, 255, 255, 0.2);
        border: 2px solid transparent;
        border-radius: 12px;
        padding: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
        flex: 1;
        min-width: 200px;
        text-align: center;
    }
    
    .persona-card:hover {
        background: rgba(255, 255, 255, 0.3);
        transform: translateY(-2px);
    }
    
    .persona-card.active {
        border-color: var(--accent-color);
        background: rgba(241, 143, 1, 0.2);
    }
    
    .persona-icon {
        font-size: 2rem;
        margin-bottom: 0.5rem;
    }
    
    .persona-title {
        font-weight: 600;
        color: white;
        margin-bottom: 0.25rem;
    }
    
    .persona-desc {
        font-size: 0.9rem;
        color: rgba(255, 255, 255, 0.8);
    }
    
    /* Upload area moderna */
    .upload-zone {
        border: 2px dashed rgba(255, 255, 255, 0.5);
        border-radius: var(--border-radius);
        padding: 3rem;
        text-align: center;
        background: rgba(255, 255, 255, 0.1);
        transition: all 0.3s ease;
        margin-bottom: 2rem;
    }
    
    .upload-zone:hover {
        border-color: var(--accent-color);
        background: rgba(255, 255, 255, 0.15);
    }
    
    /* Bot√µes de a√ß√£o r√°pida */
    .quick-actions {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin-bottom: 2rem;
    }
    
    .action-button {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
        border: none;
        padding: 1rem 1.5rem;
        border-radius: 12px;
        cursor: pointer;
        transition: all 0.3s ease;
        font-weight: 600;
        text-align: center;
    }
    
    .action-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(46, 134, 171, 0.4);
    }
    
    /* Sugest√µes de perguntas */
    .suggestions-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1rem;
        margin-top: 1rem;
    }
    
    .suggestion-chip {
        background: rgba(255, 255, 255, 0.2);
        border: 1px solid rgba(255, 255, 255, 0.3);
        border-radius: 25px;
        padding: 0.75rem 1.5rem;
        cursor: pointer;
        transition: all 0.3s ease;
        text-align: center;
        color: white;
        font-weight: 500;
    }
    
    .suggestion-chip:hover {
        background: var(--accent-color);
        transform: translateY(-1px);
        box-shadow: 0 4px 15px rgba(241, 143, 1, 0.4);
    }
    
    /* Status indicator */
    .status-indicator {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        background: var(--success-color);
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-size: 0.9rem;
        font-weight: 600;
    }
    
    /* Loading spinner moderno */
    .modern-spinner {
        border: 3px solid rgba(255, 255, 255, 0.3);
        border-top: 3px solid var(--accent-color);
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        margin: 0 auto;
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    /* Chat messages styling */
    .chat-message {
        margin-bottom: 1rem;
        padding: 1rem;
        border-radius: 12px;
        max-width: 80%;
    }
    
    .user-message {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
        margin-left: auto;
        text-align: right;
    }
    
    .assistant-message {
        background: rgba(255, 255, 255, 0.9);
        color: var(--text-color);
        margin-right: auto;
    }
    
    /* Responsivo */
    @media (max-width: 768px) {
        .persona-selector {
            flex-direction: column;
        }
        
        .quick-actions {
            grid-template-columns: 1fr;
        }
        
        .suggestions-grid {
            grid-template-columns: 1fr;
        }
    }
    
    /* Anima√ß√µes */
    .fade-in {
        animation: fadeIn 0.5s ease-in;
    }
    
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    /* Esconder elementos padr√£o do Streamlit */
    .stDeployButton { display: none; }
    .stDecoration { display: none; }
    #MainMenu { visibility: hidden; }
    footer { visibility: hidden; }
    header { visibility: hidden; }
</style>
""", unsafe_allow_html=True)

# Configura√ß√£o da API
GOOGLE_API_KEY = "AIzaSyAi-EZdS0Jners99DuB_5DkROiK16ghPnM"  # Replace with your actual API key

if not GOOGLE_API_KEY or GOOGLE_API_KEY == "YOUR_ACTUAL_API_KEY_HERE": 
    st.error("‚ö†Ô∏è ATEN√á√ÉO: A CHAVE API DO GEMINI N√ÉO FOI DEFINIDA CORRETAMENTE NO C√ìDIGO!")
    st.error("Por favor, substitua 'YOUR_ACTUAL_API_KEY_HERE' pela sua chave API real na vari√°vel GOOGLE_API_KEY no c√≥digo-fonte.")
    st.warning("Lembre-se: N√£o compartilhe este c√≥digo com sua chave API real em reposit√≥rios p√∫blicos.")
    st.stop()

try:
    genai.configure(api_key=GOOGLE_API_KEY)
    safety_settings = {
        HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_NONE,
        HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_NONE,
        HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_NONE,
        HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_NONE,
    }
    model = genai.GenerativeModel(
        model_name='gemini-1.5-flash-latest',
        safety_settings=safety_settings
    )
except Exception as e:
    st.error(f"‚ùå Falha ao configurar a API do Gemini: {str(e)}")
    st.stop()

# Inicializa√ß√£o do session state
if 'chat_messages' not in st.session_state:
    st.session_state.chat_messages = []
if 'texto_lei' not in st.session_state:
    st.session_state.texto_lei = ""
if 'nome_documento' not in st.session_state:
    st.session_state.nome_documento = ""
if 'analise_realizada' not in st.session_state:
    st.session_state.analise_realizada = False
if 'resumo_realizado' not in st.session_state:
    st.session_state.resumo_realizado = False
if 'contexto_conversa' not in st.session_state:
    st.session_state.contexto_conversa = ""
if 'persona_usuario' not in st.session_state:
    st.session_state.persona_usuario = "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Cidad√£o"
if 'casos_praticos' not in st.session_state:
    st.session_state.casos_praticos = []
if 'prazos_extraidos' not in st.session_state:
    st.session_state.prazos_extraidos = []

# --- Helper Functions ---
def extrair_texto_pdf(caminho_pdf):
    texto = ""
    try:
        with open(caminho_pdf, 'rb') as arquivo:
            leitor = PyPDF2.PdfReader(arquivo)
            if not leitor.pages:
                return ""
            for pagina_num, pagina in enumerate(leitor.pages):
                texto_pagina = pagina.extract_text()
                if texto_pagina:
                    texto += texto_pagina
        return texto.strip()
    except Exception as e:
        st.error(f"Erro ao processar o PDF: {str(e)}")
        return ""

def call_gemini_api(prompt_text, task_name="tarefa"):
    try:
        response = model.generate_content(prompt_text)
        if not response.candidates:
            if response.prompt_feedback and response.prompt_feedback.block_reason:
                block_reason_message = response.prompt_feedback.block_reason.name
                return f"Conte√∫do bloqueado: {block_reason_message}"
            else:
                return "Nenhum conte√∫do gerado."
        return response.text
    except Exception as e:
        st.error(f"‚ùå Erro durante a {task_name} com a API Gemini: {str(e)}")
        return f"Erro na API: {str(e)}"

def criar_contexto_inicial():
    """Cria o contexto inicial para o agente conversacional"""
    if st.session_state.texto_lei:
        personas = {
            "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Cidad√£o": "Use linguagem ultra-simples, foque no impacto pessoal e familiar, d√™ exemplos do cotidiano",
            "üë®‚Äçüíº Empres√°rio": "Foque em impactos comerciais, custos, prazos de adequa√ß√£o, riscos para neg√≥cios",
            "üë©‚Äç‚öñÔ∏è Advogado": "Pode usar termos t√©cnicos, foque em interpreta√ß√£o jur√≠dica, precedentes, aplica√ß√£o pr√°tica",
            "üèõÔ∏è Servidor P√∫blico": "Foque na aplica√ß√£o da norma, procedimentos, compet√™ncias dos √≥rg√£os"
        }
        
        contexto_persona = personas.get(st.session_state.persona_usuario, personas["üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Cidad√£o"])
        
        contexto = f"""
        DOCUMENTO JUR√çDICO CARREGADO: {st.session_state.nome_documento}
        
        TEXTO DA LEI/NORMA:
        {st.session_state.texto_lei[:15000]}
        
        PERFIL DO USU√ÅRIO: {st.session_state.persona_usuario}
        INSTRU√á√ïES ESPEC√çFICAS: {contexto_persona}
        
        INSTRU√á√ïES PARA O AGENTE:
        Voc√™ √© o LexF√°cil, um assistente jur√≠dico especializado em simplificar textos normativos.
        Sua miss√£o √© ajudar as pessoas a compreenderem leis e regulamentos de forma clara e acess√≠vel.
        
        DIRETRIZES:
        1. Adapte sua linguagem ao perfil do usu√°rio selecionado
        2. Quando mencionar artigos ou se√ß√µes, explique seu significado pr√°tico
        3. Use exemplos relevantes ao perfil do usu√°rio
        4. Se um termo jur√≠dico for necess√°rio, explique conforme o n√≠vel do usu√°rio
        5. Seja objetivo mas amig√°vel
        6. Foque sempre no documento carregado pelo usu√°rio
        7. Se n√£o souber algo espec√≠fico do documento, seja honesto
        8. Sugira funcionalidades √∫teis (casos pr√°ticos, an√°lise de prazos, etc.)
        
        Responda sempre baseado no documento carregado acima.
        """
        return contexto
    return ""

def processar_pergunta_chat(pergunta):
    """Processa uma pergunta no chat considerando o contexto da lei"""
    contexto_base = criar_contexto_inicial()
    
    # Hist√≥rico das √∫ltimas 3 mensagens para contexto
    historico_recente = ""
    if len(st.session_state.chat_messages) > 0:
        ultimas_msgs = st.session_state.chat_messages[-6:]  # √öltimas 3 trocas (user + assistant)
        for msg in ultimas_msgs:
            papel = "USU√ÅRIO" if msg["role"] == "user" else "ASSISTENTE"
            historico_recente += f"{papel}: {msg['content']}\n"
    
    prompt = f"""
    {contexto_base}
    
    HIST√ìRICO DA CONVERSA:
    {historico_recente}
    
    PERGUNTA ATUAL DO USU√ÅRIO:
    {pergunta}
    
    Responda de forma clara, pr√°tica e acess√≠vel, sempre baseado no documento jur√≠dico carregado.
    """
    
    return call_gemini_api(prompt, "resposta do chat")

def analisar_legibilidade_gemini(texto):
    prompt = f"""
    Analise a legibilidade deste texto jur√≠dico (em portugu√™s) considerando os seguintes crit√©rios.
    Para cada crit√©rio, forne√ßa uma avalia√ß√£o e, se aplic√°vel, sugest√µes de melhoria.

    1.  **Complexidade Lingu√≠stica Geral:**
        *   Avalia√ß√£o (escala de 1-F√°cil a 10-Muito Dif√≠cil):
        *   Justificativa:
    2.  **Densidade Conceitual:**
        *   Avalia√ß√£o (Baixa, M√©dia, Alta):
        *   Exemplos de conceitos densos (se houver):
    3.  **Uso de Termos T√©cnicos (Jarg√£o Jur√≠dico):**
        *   Avalia√ß√£o (Moderado, Frequente, Excessivo):
        *   Exemplos de termos t√©cnicos chave:
        *   Sugest√µes para simplificar ou explicar termos:
    4.  **Estrutura das Frases:**
        *   Avalia√ß√£o (Comprimento m√©dio, Clareza, Uso de voz passiva/ativa):
        *   Exemplos de frases complexas (se houver):
        *   Sugest√µes para melhorar a clareza das frases:
    5.  **Coer√™ncia e Coes√£o:**
        *   Avalia√ß√£o (Como as ideias se conectam, clareza do fluxo l√≥gico):
    6.  **P√∫blico-Alvo Ideal:**
        *   Para quem este texto √© mais adequado em sua forma atual?
    7.  **Recomenda√ß√µes Gerais para Simplifica√ß√£o:**
        *   Liste 3-5 a√ß√µes concretas para tornar o texto mais acess√≠vel a um p√∫blico leigo.

    Formato de Resposta: Utilize estritamente MARKDOWN, com t√≠tulos (usando ## ou ###) e bullet points (usando * ou -).

    Texto para An√°lise:
    ---
    {texto[:18000]}
    ---
    """
    return call_gemini_api(prompt, "An√°lise de Legibilidade")

def gerar_resumo_gemini(texto):
    """Gera um resumo simplificado da lei"""
    prompt = f"""
    Voc√™ √© um assistente especializado em simplificar textos jur√≠dicos para o p√∫blico leigo.
    Sua tarefa √© gerar um resumo conciso e em linguagem acess√≠vel do texto jur√≠dico fornecido.
    O resumo deve:
    1.  Identificar e explicar os pontos principais do texto de forma clara.
    2.  Mencionar artigos, par√°grafos ou se√ß√µes relevantes, explicando seu significado pr√°tico.
    3.  Descrever os efeitos pr√°ticos ou as consequ√™ncias do que est√° estabelecido no texto.
    4.  Evitar jarg√µes jur√≠dicos sempre que poss√≠vel. Se um termo t√©cnico for essencial, explique-o brevemente.
    5.  Ser estruturado de forma l√≥gica e f√°cil de seguir.
    6.  Utilizar formato MARKDOWN para melhor legibilidade (t√≠tulos, bullet points, negrito).

    Texto Jur√≠dico para Resumir:
    ---
    {texto[:18000]}
    ---

    Resumo Acess√≠vel:
    """
    return call_gemini_api(prompt, "Gera√ß√£o de Resumo")

def gerar_casos_praticos(texto):
    """Gera casos pr√°ticos baseados na lei"""
    prompt = f"""
    Com base neste texto jur√≠dico, crie 3 casos pr√°ticos/exemplos reais de como esta lei se aplica no dia a dia.
    
    Para cada caso, forne√ßa:
    1. **Situa√ß√£o**: Descreva um cen√°rio espec√≠fico e realista
    2. **Aplica√ß√£o da Lei**: Como a lei se aplica neste caso
    3. **Consequ√™ncias**: O que acontece na pr√°tica
    4. **Dica Pr√°tica**: Uma orienta√ß√£o √∫til
    
    Casos devem ser:
    - Realistas e espec√≠ficos
    - F√°ceis de entender
    - Relevantes para diferentes perfis de pessoas
    - Escritos em linguagem simples
    
    Use formato MARKDOWN com t√≠tulos e se√ß√µes claras.
    
    Texto da Lei:
    ---
    {texto[:15000]}
    ---
    """
    return call_gemini_api(prompt, "Gera√ß√£o de Casos Pr√°ticos")

def extrair_prazos_importantes(texto):
    """Extrai prazos e datas importantes da lei"""
    prompt = f"""
    Analise este texto jur√≠dico e identifique TODOS os prazos, datas e per√≠odos importantes mencionados.
    
    Para cada prazo encontrado, forne√ßa:
    1. **Prazo**: O per√≠odo espec√≠fico (dias, meses, anos)
    2. **Para que serve**: O que deve ser feito neste prazo
    3. **Quem deve cumprir**: Respons√°vel pela a√ß√£o
    4. **Consequ√™ncia**: O que acontece se n√£o cumprir
    5. **Artigo/Se√ß√£o**: Onde est√° previsto no texto
    
    Organize em ordem de import√¢ncia/urg√™ncia.
    Use formato MARKDOWN com emojis para facilitar visualiza√ß√£o.
    
    Se n√£o encontrar prazos espec√≠ficos, informe que a lei n√£o estabelece prazos determinados.
    
    Texto da Lei:
    ---
    {texto[:15000]}
    ---
    """
    return call_gemini_api(prompt, "Extra√ß√£o de Prazos")

def busca_semantica(texto, consulta):
    """Realiza busca sem√¢ntica no texto da lei"""
    prompt = f"""
    O usu√°rio quer encontrar informa√ß√µes sobre: "{consulta}"
    
    Procure no texto jur√≠dico abaixo todas as informa√ß√µes relacionadas a esta consulta.
    Considere sin√¥nimos, conceitos relacionados e contexto.
    
    Retorne:
    1. **Trechos Relevantes**: Cite os artigos/par√°grafos espec√≠ficos
    2. **Explica√ß√£o Simplificada**: O que significa na pr√°tica
    3. **Palavras-chave Encontradas**: Termos relacionados identificados
    
    Se n√£o encontrar nenhuma informa√ß√£o relacionada, informe claramente.
    
    Consulta do usu√°rio: {consulta}
    
    Texto da Lei:
    ---
    {texto[:15000]}
    ---
    """
    return call_gemini_api(prompt, "Busca Sem√¢ntica")

# --- Interface Principal ---

# Header moderno
st.markdown("""
<div class="main-container">
    <div class="modern-header fade-in">
        <h1 class="header-title">‚öñÔ∏è LexF√°cil</h1>
        <p class="header-subtitle">Seu assistente jur√≠dico inteligente que transforma juridiqu√™s em linguagem humana</p>
    </div>
</div>
""", unsafe_allow_html=True)

# Container principal
with st.container():
    # Seletor de Persona moderno
    st.markdown("""
    <div class="glass-card fade-in">
        <h3 style="color: white; margin-bottom: 1rem;">üë§ Como posso te ajudar hoje?</h3>
        <div class="persona-selector">
    """, unsafe_allow_html=True)
    
    personas = {
        "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Cidad√£o": {
            "icon": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶",
            "title": "Cidad√£o",
            "desc": "Linguagem simples e exemplos do dia a dia"
        },
        "üë®‚Äçüíº Empres√°rio": {
            "icon": "üë®‚Äçüíº", 
            "title": "Empres√°rio",
            "desc": "Foco em impactos comerciais e neg√≥cios"
        },
        "üë©‚Äç‚öñÔ∏è Advogado": {
            "icon": "üë©‚Äç‚öñÔ∏è",
            "title": "Advogado", 
            "desc": "An√°lise t√©cnica e jur√≠dica detalhada"
        },
        "üèõÔ∏è Servidor P√∫blico": {
            "icon": "üèõÔ∏è",
            "title": "Servidor P√∫blico",
            "desc": "Aplica√ß√£o pr√°tica da norma"
        }
    }
    
    # Criar colunas para personas
    cols = st.columns(4)
    for i, (key, persona) in enumerate(personas.items()):
        with cols[i]:
            active_class = "active" if key == st.session_state.persona_usuario else ""
            if st.button(
                f"{persona['icon']}\n{persona['title']}\n{persona['desc']}", 
                key=f"persona_{i}",
                use_container_width=True
            ):
                if key != st.session_state.persona_usuario:
                    st.session_state.persona_usuario = key
                    st.success(f"‚úÖ Perfil alterado para {persona['title']}")
                    time.sleep(1)
                    st.rerun()
    
    st.markdown("</div></div>", unsafe_allow_html=True)
    
    # Upload de arquivo com interface moderna
    if not st.session_state.texto_lei:
        st.markdown("""
        <div class="glass-card fade-in">
            <div class="upload-zone">
                <h2 style="color: white; margin-bottom: 1rem;">üìÑ Carregue seu documento jur√≠dico</h2>
                <p style="color: rgba(255,255,255,0.8); margin-bottom: 2rem;">
                    Arraste e solte ou clique para selecionar um arquivo PDF
                </p>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        uploaded_file = st.file_uploader(
            "Escolher arquivo PDF", 
            type=["pdf"],
            label_visibility="collapsed"
        )
        
        if uploaded_file:
            if uploaded_file.name != st.session_state.nome_documento:
                # Novo arquivo carregado
                with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp_file:
                    tmp_file.write(uploaded_file.getvalue())
                    tmp_file_path = tmp_file.name

                with st.spinner("üîÑ Processando documento..."):
                    texto_extraido = extrair_texto_pdf(tmp_file_path)
                    os.unlink(tmp_file_path)
                    
                    if texto_extraido:
                        st.session_state.texto_lei = texto_extraido
                        st.session_state.nome_documento = uploaded_file.name
                        st.session_state.chat_messages = []  # Limpa chat anterior
                        st.session_state.analise_realizada = False
                        st.session_state.resumo_realizado = False
                        
                        st.success("‚úÖ Documento carregado com sucesso!")
                        
                        # Mensagem de boas-vindas autom√°tica
                        boas_vindas = f"""Perfeito! Acabei de processar o documento **{uploaded_file.name}**. üéâ

Agora posso ajudar voc√™ a entender este texto jur√≠dico de forma simples e clara. 

**O que voc√™ gostaria de fazer primeiro?**

üí° **Dica**: Use os bot√µes de a√ß√£o r√°pida abaixo ou me fa√ßa perguntas espec√≠ficas sobre a lei!"""
                        
                        st.session_state.chat_messages.append({
                            "role": "assistant",
                            "content": boas_vindas,
                            "timestamp": datetime.now()
                        })
                        st.rerun()
                    else:
                        st.error("‚ùå N√£o foi poss√≠vel extrair texto do PDF")
    
    # Interface principal quando documento est√° carregado
    if st.session_state.texto_lei:
        # Status do documento
        st.markdown(f"""
        <div class="glass-card fade-in">
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <div>
                    <h3 style="color: white; margin: 0;">üìã {st.session_state.nome_documento}</h3>
                    <p style="color: rgba(255,255,255,0.8); margin: 0.5rem 0 0 0;">
                        {len(st.session_state.texto_lei):,} caracteres ‚Ä¢ Modo: {st.session_state.persona_usuario}
                    </p>
                </div>
                <div class="status-indicator">
                    ‚úÖ Ativo
                </div>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        # A√ß√µes r√°pidas
        st.markdown("""
        <div class="glass-card fade-in">
            <h3 style="color: white; margin-bottom: 1.5rem;">üöÄ A√ß√µes R√°pidas</h3>
            <div class="quick-actions">
        """, unsafe_allow_html=True)
        
        col1, col2, col3, col4 = st.columns(
